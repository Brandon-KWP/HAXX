<!DOCTYPE html>
<html lang="fr">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/css/admin.css" />
    <title>Gestion des Projets</title>
    <style>
      .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
      }

      .modal-content {
        background-color: white;
        margin: 2% auto;
        padding: 20px;
        width: 95%;
        max-width: 1200px;
        border-radius: 8px;
        max-height: 95vh;
        overflow-y: auto;
      }

      .form-grid {
        display: grid;
        grid-template-columns: repeat(5, 1fr);
        gap: 20px;
        margin-top: 20px;
        padding: 15px;
      }

      .form-group {
        margin-bottom: 15px;
      }

      .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
      }

      .form-group input {
        width: calc(100% - 16px);
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
        margin-bottom: 10px;
      }

      .form-group input[type="text"] {
        font-family: monospace;
        letter-spacing: 1px;
      }

      /* Ajout d'une info-bulle pour le format */
      .form-group input[type="text"]::placeholder {
        color: #999;
      }

      .form-group input[type="text"]:invalid {
        border-color: #ff6b6b;
      }

      .form-group input[type="text"]:valid {
        border-color: #51cf66;
      }

      .btn-add {
        background-color: #4caf50;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
      }

      .card-times {
        background: #f9f9f9;
        padding: 15px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }

      h4 {
        margin-top: 0;
        margin-bottom: 15px;
        color: #333;
        border-bottom: 2px solid #4caf50;
        padding-bottom: 5px;
      }

      .time-input {
        font-family: monospace;
        letter-spacing: 1px;
        text-align: center;
        width: 100px !important;
      }

      .time-input::placeholder {
        color: #999;
      }

      .time-input:focus {
        outline: none;
        border-color: #4caf50;
        box-shadow: 0 0 5px rgba(76, 175, 80, 0.3);
      }

      .time-input:invalid {
        border-color: #ff6b6b;
      }

      .time-input:valid {
        border-color: #51cf66;
      }
    </style>
  </head>
  <body>
    <header>
      <%- include('../../partials/navbar-admin') %>
      <h1>Tableau de Bord Administrateur</h1>
    </header>
    <main>
      <h2>Gestion des Projets</h2>
      <table>
        <thead>
          <tr>
            <th>ID</th>
            <th>Nom du Projet</th>
            <th>Description</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <% projects.forEach(project => { %>
          <tr>
            <td><%= project.id %></td>
            <td><%= project.name %></td>
            <td><%= project.description %></td>
            <td>
              <a href="/admin/projects/edit/<%= project.id %>">Modifier</a>
              <form
                action="/admin/projects/delete/<%= project.id %>"
                method="POST"
                style="display: inline"
              >
                <button type="submit">Supprimer</button>
              </form>
            </td>
          </tr>
          <% }); %>
        </tbody>
      </table>
      <button onclick="openAddModal()" class="btn-add">
        Ajouter un Nouveau Projet
      </button>

      <!-- Modal pour ajouter un projet -->
      <div id="addModal" class="modal">
        <div class="modal-content">
          <span class="close" onclick="closeAddModal()">&times;</span>
          <h2>Ajouter un nouveau projet</h2>
          <form id="addProjectForm">
            <div class="form-group">
              <label for="projectName">Nom du projet :</label>
              <input type="text" id="projectName" name="name" required />
            </div>
            <div class="form-group">
              <label for="projectImage">Image (URL) :</label>
              <input type="url" id="projectImage" name="image" required />
            </div>
            <div class="form-group">
              <label for="projectDate">Date :</label>
              <input type="date" id="projectDate" name="date" required />
            </div>

            <!-- Grille pour les 25 cartes -->
            <h3>Temps des médailles</h3>
            <div class="form-grid">
              <% for(let i = 1; i <= 25; i++) { %>
              <div class="card-times">
                <h4>Carte <%= i %></h4>
                <div class="form-group">
                  <label for="auteur<%= i %>">Auteur :</label>
                  <input
                    type="text"
                    id="auteur<%= i %>"
                    name="cards[<%= i-1 %>][auteur]"
                    required
                  />
                </div>
                <div class="form-group">
                  <label for="nom<%= i %>">Nom :</label>
                  <input
                    type="text"
                    id="nom<%= i %>"
                    name="nom[<%= i-1 %>][nom]"
                    required
                  />
                </div>
                <div class="form-group">
                  <label for="author<%= i %>">Médaille Author :</label>
                  <input
                    type="time"
                    id="author<%= i %>"
                    name="cards[<%= i-1 %>][author]"
                    class="time-input"
                    step="0.001"
                    required
                  />
                </div>
                <div class="form-group">
                  <label for="gold<%= i %>">Médaille Or :</label>
                  <input
                    type="time"
                    id="gold<%= i %>"
                    name="cards[<%= i-1 %>][gold]"
                    class="time-input"
                    step="0.001"
                    required
                  />
                </div>
                <div class="form-group">
                  <label for="silver<%= i %>">Médaille Argent :</label>
                  <input
                    type="time"
                    id="silver<%= i %>"
                    name="cards[<%= i-1 %>][silver]"
                    class="time-input"
                    step="0.001"
                    required
                  />
                </div>
                <div class="form-group">
                  <label for="bronze<%= i %>">Médaille Bronze :</label>
                  <input
                    type="time"
                    id="bronze<%= i %>"
                    name="cards[<%= i-1 %>][bronze]"
                    class="time-input"
                    step="0.001"
                    required
                  />
                </div>
              </div>
              <% } %>
            </div>
            <button type="submit" class="btn-add">Créer le projet</button>
          </form>
        </div>
      </div>
    </main>
    <script>
      function openAddModal() {
          document.getElementById('addModal').style.display = 'block';
      }

      function closeAddModal() {
          document.getElementById('addModal').style.display = 'none';
      }

      document.getElementById('addProjectForm').onsubmit = async function(e) {
          e.preventDefault();

          const formData = {
              name: document.getElementById('projectName').value,
              image: document.getElementById('projectImage').value,
              date: document.getElementById('projectDate').value,
              cards: []
          };

          // Récupérer les données des 25 cartes
          for(let i = 1; i <= 25; i++) {
              formData.cards.push({
                  author: document.getElementById(`author${i}`).value,
                  gold: document.getElementById(`gold${i}`).value,
                  silver: document.getElementById(`silver${i}`).value,
                  bronze: document.getElementById(`bronze${i}`).value
              });
          }

          try {
              const response = await fetch('/admin/projects/add', {
                  method: 'POST',
                  headers: {
                      'Content-Type': 'application/json'
                  },
                  body: JSON.stringify(formData)
              });

              if (response.ok) {
                  closeAddModal();
                  location.reload();
              } else {
                  const data = await response.json();
                  alert(data.message || "Erreur lors de la création du projet");
              }
          } catch (error) {
              console.error('Erreur:', error);
              alert('Erreur lors de la création du projet');
          }
      };

      // Fermer la modal si on clique en dehors
      window.onclick = function(event) {
          if (event.target == document.getElementById('addModal')) {
              closeAddModal();
          }
      }

      // Fonction générique pour gérer la saisie du temps
      function handleTimeInput(value) {
          // Supprime tout sauf les chiffres
          value = value.replace(/\D/g, "");

          if (value.length > 0) {
              // Minutes (maximum 59)
              let minutes = value.substring(0, 2);
              if (parseInt(minutes) > 59) minutes = "59";

              // Secondes (maximum 59)
              let seconds = value.length > 2 ? value.substring(2, 4) : "";
              if (parseInt(seconds) > 59) seconds = "59";

              // Millisecondes (maximum 999)
              let milliseconds = value.length > 4 ? value.substring(4, 7) : "";
              if (parseInt(milliseconds) > 999) milliseconds = "999";

              // Construction du temps formaté
              let formattedTime = minutes;
              if (seconds || value.length > 2) {
                  formattedTime += ":" + seconds.padStart(2, "0");
              }
              if (milliseconds || value.length > 4) {
                  formattedTime += "." + milliseconds.padEnd(3, "0");
              }

              return formattedTime;
          }
          return "";
      }

      // Ajout d'une fonction pour convertir le temps en millisecondes
      function timeToMilliseconds(timeStr) {
          const matches = timeStr.match(/^(\d{2}):(\d{2})\.(\d{3})$/);
          if (matches) {
              const [, minutes, seconds, milliseconds] = matches;
              return (parseInt(minutes) * 60 * 1000) + 
                     (parseInt(seconds) * 1000) + 
                     parseInt(milliseconds);
          }
          return 0;
      }

      // Ajout d'une fonction pour convertir les millisecondes en format temps
      function millisecondsToTime(ms) {
          const minutes = Math.floor(ms / 60000);
          const seconds = Math.floor((ms % 60000) / 1000);
          const milliseconds = ms % 1000;
          
          return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}.${milliseconds.toString().padStart(3, '0')}`;
      }

      // Initialisation des champs de temps
      document.addEventListener("DOMContentLoaded", function () {
          document.querySelectorAll(".time-input").forEach(input => {
              initializeTimeInput(input);
          });
      });
  </script>
  </body>
</html>
``` 
